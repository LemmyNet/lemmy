use std::{
  fmt::Write,
  fs::{read_to_string, write},
};
use itertools::Itertools;
use std::collections::BTreeSet;
use std::ffi::OsStr;
use std::fs::read_dir;
use std::path::Path;

fn main() -> std::io::Result<()> {
  let mut result = "// @generated by scripts/lint.sh\nuse crate::schema::*;use diesel::query_source::TableNotEqual;trait HasTupleId:diesel::query_source::Table{type TupleId;}struct IsThisOne;struct IsNotThisOne;".to_owned();
  /*let mut files = vec![];
  let mut remaining_dir_paths = vec![Path::new("crates").to_owned(), Path::new("src").to_owned()];
  while let Some(dir_path) = remaining_dir_paths.pop() {
    for dir_entry in read_dir(&dir_path)? {
      let dir_entry = dir_entry?;
      if dir_entry.file_type()?.is_dir() {
        remaining_dir_paths.push(dir_entry.path());
      } else if dir_entry.path().extension().map(OsStr::as_encoded_bytes) == Some(b"rs") {
        let contents = read_to_string(dir_entry.path())?;
        if !contents.starts_with("// @generated") {
          files.push(contents);
        }
      }
    }
  }
  let pairs = files
    .iter()
    .flat_map(|s| s.split("fn "))
    .flat_map(|fn_chunk| {
      fn_chunk
        .split("::")
        .tuple_windows()
        .filter(|(before, after)| {
          if let Some(s) = after.strip_prefix("table") {
            !s.starts_with('!')
          } else {
            before.ends_with("_actions")
          }
        })
        .filter_map(|(before, after)| {
          before.rsplit_once(|c: char| !(c.is_ascii_alphabetic() || c == '_'))
        })
        .map(|s| s.1)
        .filter(|&s| s.chars().all(|c| !c.is_ascii_uppercase()) && s != "pg_namespace")
        .combinations(2)
        .filter_map(|v| <[&str; 2]>::try_from(v).ok())
        .filter(|[a, b]| a != b && !a.is_empty() && !b.is_empty())
        .map(|mut arr| {
          arr.sort_unstable();
          arr
        })
    })
    .collect::<BTreeSet<_>>();
  println!("{} pairs", pairs.len());
  for [a, b] in pairs {
    write!(
      &mut result,
      "impl TableNotEqual<{a}::table>for {b}::table{{}}impl TableNotEqual<{b}::table>for {a}::table{{}}"
    )
    .expect("");
  }*/
  let tables = "admin_allow_instance,
    admin_block_instance,
    admin_purge_comment,
    admin_purge_community,
    admin_purge_person,
    admin_purge_post,
    captcha_answer,
    comment,
    comment_actions,
    comment_aggregates,
    comment_reply,
    comment_report,
    community,
    community_actions,
    community_aggregates,
    community_language,
    community_report,
    custom_emoji,
    custom_emoji_keyword,
    email_verification,
    federation_allowlist,
    federation_blocklist,
    federation_queue_state,
    image_details,
    inbox_combined,
    instance,
    instance_actions,
    language,
    local_image,
    local_site,
    local_site_rate_limit,
    local_site_url_blocklist,
    local_user,
    local_user_language,
    local_user_vote_display_mode,
    login_token,
    mod_add,
    mod_add_community,
    mod_ban,
    mod_ban_from_community,
    mod_feature_post,
    mod_hide_community,
    mod_lock_post,
    mod_remove_comment,
    mod_remove_community,
    mod_remove_post,
    mod_transfer_community,
    modlog_combined,
    oauth_account,
    oauth_provider,
    password_reset_request,
    person,
    person_actions,
    person_aggregates,
    person_ban,
    person_comment_mention,
    person_content_combined,
    person_post_mention,
    person_saved_combined,
    post,
    post_actions,
    post_aggregates,
    post_report,
    post_tag,
    previously_run_sql,
    private_message,
    private_message_report,
    received_activity,
    registration_application,
    remote_image,
    report_combined,
    search_combined,
    secret,
    sent_activity,
    site,
    site_aggregates,
    site_language,
    tag,
    tagline"
    .split(',')
    .map(str::trim)
    .collect::<Vec<&'static str>>();
  for (i, table) in tables.iter().enumerate() {
    write!(
      &mut result,
      "impl HasTupleId for {table}::table {{ type TupleId = ("
    )
    .expect("");
    for j in 0..tables.len() {
      if i == j {
        result.push_str("IsThisOne,");
      } else {
        result.push_str("IsNotThisOne,");
      }
    }
    write!(&mut result, ");}} impl<").expect("");
    for j in 0..tables.len() {
      if i != j {
        write!(&mut result, "T{j},").expect("");
      }
    }
    result.push_str("T: HasTupleId<TupleId=(");
    for j in 0..tables.len() {
      if i != j {
        write!(&mut result, "T{j},").expect("");
      } else {
        result.push_str("IsNotThisOne,");
      }
    }
    write!(&mut result, ")>> TableNotEqual<T> for {table}::table {{}}").expect("");
  }

  lazy_write("crates/db_schema/src/table_pairs.rs", &result)?;
  Ok(())
}

fn lazy_write(path: &str, new: &str) -> std::io::Result<()> {
  let old = read_to_string(path)?;
  if old != new {
    write(path, new)?;
  }
  Ok(())
}
