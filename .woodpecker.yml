# TODO: The when: platform conditionals aren't working currently
# See https://github.com/woodpecker-ci/woodpecker/issues/1677

variables:
  - &rust_image "rust:1.74.0"
  - &slow_check_paths
    - path:
        # rust source code
        - "crates/**"
        - "src/**"
        - "**/Cargo.toml"
        - "Cargo.lock"
        # sql code
        - "migrations/**"
        - "replaceable_schema.sql"
        # typescript tests
        - "api_tests/**"
        # config files and scripts used by ci
        - ".woodpecker.yml"
        - ".rustfmt.toml"
        - "scripts/update_config_defaults.sh"
        - "diesel.toml"
        - ".gitmodules"

# Broken for cron jobs currently, see
# https://github.com/woodpecker-ci/woodpecker/issues/1716
# clone:
#   git:
#     image: woodpeckerci/plugin-git
#     settings:
#       recursive: true
#       submodule_update_remote: true

steps:
  prepare_repo:
    image: alpine:3
    commands:
      - apk add git
      - git submodule init
      - git submodule update

  prettier_check:
    group: format
    image: tmknom/prettier:3.0.0
    commands:
      - prettier -c . '!**/volumes' '!**/dist' '!target' '!**/translations'

  toml_fmt:
    group: format
    image: tamasfe/taplo:0.8.1
    commands:
      - taplo format --check

  sql_fmt:
    group: format
    image: backplane/pgformatter:latest
    commands:
      - ./scripts/sql_format_check.sh

  cargo_fmt:
    group: format
    image: rustlang/rust:nightly
    environment:
      # store cargo data in repo folder so that it gets cached between steps
      CARGO_HOME: .cargo_home
    commands:
      # need make existing toolchain available
      - cargo +nightly fmt -- --check

  cargo_machete:
    group: format
    image: rustlang/rust:nightly
    commands:
      - wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
      - tar -xvf cargo-binstall-x86_64-unknown-linux-musl.tgz
      - cp cargo-binstall /usr/local/cargo/bin
      - cargo binstall -y cargo-machete
      - cargo machete

  ignored_files:
    group: format
    image: alpine:3
    commands:
      - apk add git
      - IGNORED=$(git ls-files --cached -i --exclude-standard)
      - if [[ "$IGNORED" ]]; then echo "Ignored files present:\n$IGNORED\n"; exit 1; fi

  restore-cache:
    image: meltwater/drone-cache:v1
    pull: true
    settings:
      restore: true
      endpoint:
        from_secret: MINIO_ENDPOINT
      access-key:
        from_secret: MINIO_WRITE_USER
      secret-key:
        from_secret: MINIO_WRITE_PASSWORD
      bucket:
        from_secret: MINIO_BUCKET
      region: us-east-1
      cache_key: "rust-cache"
      path-style: true
      mount:
        - ".cargo_home"
        - "target"
        - "api_tests/node_modules"
    secrets:
      [MINIO_ENDPOINT, MINIO_WRITE_USER, MINIO_WRITE_PASSWORD, MINIO_BUCKET]
    when: *slow_check_paths

  # make sure api builds with default features (used by other crates relying on lemmy api)
  check_api_common_default_features:
    image: *rust_image
    environment:
      CARGO_HOME: .cargo_home
    commands:
      - cargo check --package lemmy_api_common
    when: *slow_check_paths

  lemmy_api_common_doesnt_depend_on_diesel:
    image: *rust_image
    environment:
      CARGO_HOME: .cargo_home
    commands:
      - "! cargo tree -p lemmy_api_common --no-default-features -i diesel"
    when: *slow_check_paths

  lemmy_api_common_works_with_wasm:
    image: *rust_image
    environment:
      CARGO_HOME: .cargo_home
    commands:
      - "rustup target add wasm32-unknown-unknown"
      - "cargo check --target wasm32-unknown-unknown -p lemmy_api_common"
    when: *slow_check_paths

  check_defaults_hjson_updated:
    image: *rust_image
    environment:
      CARGO_HOME: .cargo_home
    commands:
      - export LEMMY_CONFIG_LOCATION=./config/config.hjson
      - ./scripts/update_config_defaults.sh config/defaults_current.hjson
      - diff config/defaults.hjson config/defaults_current.hjson
    when: *slow_check_paths

  check_diesel_schema:
    image: willsquire/diesel-cli
    environment:
      CARGO_HOME: .cargo_home
      DATABASE_URL: postgres://lemmy:password@database:5432/lemmy
    commands:
      - diesel migration run
      - diesel print-schema --config-file=diesel.toml > tmp.schema
      - diff tmp.schema crates/db_schema/src/schema.rs
    when: *slow_check_paths

  check_diesel_migration_revertable:
    image: willsquire/diesel-cli
    environment:
      CARGO_HOME: .cargo_home
      DATABASE_URL: postgres://lemmy:password@database:5432/lemmy
    commands:
      - diesel migration run
      - psql -f replaceable_schema.sql
      - diesel migration redo
    when: *slow_check_paths

  cargo_clippy:
    image: *rust_image
    environment:
      CARGO_HOME: .cargo_home
    commands:
      # when adding new clippy lints, make sure to also add them in scripts/lint.sh
      - rustup component add clippy
      - cargo clippy --workspace --tests --all-targets --features console -- -D warnings
    when: *slow_check_paths

  cargo_build:
    image: *rust_image
    environment:
      CARGO_HOME: .cargo_home
    commands:
      - cargo build
      - mv target/debug/lemmy_server target/lemmy_server
    when: *slow_check_paths

  cargo_test:
    group: tests
    image: *rust_image
    environment:
      LEMMY_DATABASE_URL: postgres://lemmy:password@database:5432/lemmy
      RUST_BACKTRACE: "1"
      CARGO_HOME: .cargo_home
    commands:
      - export LEMMY_CONFIG_LOCATION=../../config/config.hjson
      - cargo test --workspace --no-fail-fast
    when: *slow_check_paths

  run_federation_tests:
    group: tests
    image: node:20-bookworm-slim
    environment:
      LEMMY_DATABASE_URL: postgres://lemmy:password@database:5432
      DO_WRITE_HOSTS_FILE: "1"
    commands:
      - apt update && apt install -y bash curl postgresql-client
      - bash api_tests/prepare-drone-federation-test.sh
      - cd api_tests/
      - yarn
      - yarn api-test
    when: *slow_check_paths

  rebuild-cache:
    image: meltwater/drone-cache:v1
    pull: true
    settings:
      rebuild: true
      endpoint:
        from_secret: MINIO_ENDPOINT
      access-key:
        from_secret: MINIO_WRITE_USER
      secret-key:
        from_secret: MINIO_WRITE_PASSWORD
      bucket:
        from_secret: MINIO_BUCKET
      cache_key: "rust-cache"
      region: us-east-1
      path-style: true
      mount:
        - ".cargo_home"
        - "target"
        - "api_tests/node_modules"
    secrets:
      [MINIO_ENDPOINT, MINIO_WRITE_USER, MINIO_WRITE_PASSWORD, MINIO_BUCKET]
    when:
      - event: push
        branch: main

  publish_release_docker:
    image: woodpeckerci/plugin-docker-buildx
    secrets: [docker_username, docker_password]
    settings:
      repo: dessalines/lemmy
      dockerfile: docker/Dockerfile
      platforms: linux/amd64, linux/arm64
      build_args:
        - RUST_RELEASE_MODE=release
      tag: ${CI_COMMIT_TAG}
    when:
      event: tag

  nightly_build:
    image: woodpeckerci/plugin-docker-buildx
    secrets: [docker_username, docker_password]
    settings:
      repo: dessalines/lemmy
      dockerfile: docker/Dockerfile
      platforms: linux/amd64,linux/arm64
      build_args:
        - RUST_RELEASE_MODE=release
      tag: dev
    when:
      event: cron

  # using https://github.com/pksunkara/cargo-workspaces
  publish_to_crates_io:
    image: *rust_image
    commands:
      - 'echo "pub const VERSION: &str = \"$(git describe --tag)\";" > "crates/utils/src/version.rs"'
      - cargo install cargo-workspaces
      - cp -r migrations crates/db_schema/
      - cargo login "$CARGO_API_TOKEN"
      - cargo workspaces publish --from-git --allow-dirty --no-verify --allow-branch "${CI_COMMIT_TAG}" --yes custom "${CI_COMMIT_TAG}"
    secrets: [cargo_api_token]
    when:
      event: tag

  notify_on_failure:
    image: alpine:3
    commands:
      - apk add curl
      - "curl -d'Lemmy CI build failed: ${CI_PIPELINE_URL}' ntfy.sh/lemmy_drone_ci"
    when:
      status: [failure]

  notify_on_tag_deploy:
    image: alpine:3
    commands:
      - apk add curl
      - "curl -d'lemmy:${CI_COMMIT_TAG} deployed' ntfy.sh/lemmy_drone_ci"
    when:
      event: tag

services:
  database:
    image: postgres:15.2-alpine
    environment:
      POSTGRES_USER: lemmy
      POSTGRES_PASSWORD: password
